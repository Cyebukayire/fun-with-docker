### Docker Intro

Docker is a platform for building, running and shipping applications
It can run and function the same way on other machines.

Docker creates isolated environments to install all dependencies and run your application anywhere

# Container
A container is an isolated environment for running an application.

With containers we can:
    Allow running multiple apps in isolation
    Are lightweight
    Use OS of the host
    Start quickly
    Need less harware resources

# Application
To dockerize your application just add a docker file in the root directory of your project. This docker file turns the application into an image that contains everything our application needs to run

# Image
Image contains:
    A cut-down OS
    A runtime environment eg: node
    Application files
    Third-party Libraries
    Environment variables

Once we have our image, we tell docker to start container using that image and our application gets loaded inside the container.
Instead of running our application on our machine, we tell docker to run it inside a container.

Once we have this image we can push it to registry like docker hub. Docker hub to docker is like github to git. It's a storage for docker images that anyone can use. So, any machine running docker can pull our image and run it.


# Packagine our application
<!-- 
-t : is a tag to identify our image
.  : to identify the docker directory  -->
`docker build -t hello-docker .`

List all available images
`docker image ls`

Run the image
`docker run hello-docker`


## Cloning and Running an existing project in a container
# Example

1. First, clone a repository
The Getting Started project is a simple GitHub repository which contains everything you need to build an image and run it as a container.

`git clone https://github.com/docker/getting-started.git`


2. Now, build the image
A Docker image is a private file system just for your container. It provides all the files and code your container needs.

`cd getting-started`

`docker build -t {userName}/dockerfirstrial .`


3. Run your first Container
Start a container based on the image you built in the previous step. Running a container launches your application with private resources, securely isolated from the rest of your machine.

`docker run --name dockerfirstrial {userName}/dockerfirstrial`

To start an already existing container
`docker start dockerfirstrial`

To stop a container
`docker stop dockerfirstrial`

To remove an existed container
`docker remove dockerfirstrial`

4. Now save and share your image
Save and share your image on Docker Hub to enable other users to easily download and run the image on any destination machine.

`docker tag <existing-image> <hub-user>/<repo-name>[:<tag>]`
`docker push <hub-user>/<repo-name>:<tag>`